// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoServiceClient is the client API for DemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoServiceClient interface {
	// Operation contract(s)
	// Request-Response
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	// Server-Streaming
	GeneratePrimes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (DemoService_GeneratePrimesClient, error)
	// Client Streaming
	Aggregate(ctx context.Context, opts ...grpc.CallOption) (DemoService_AggregateClient, error)
	// Bidirectional streaming
	Greet(ctx context.Context, opts ...grpc.CallOption) (DemoService_GreetClient, error)
}

type demoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoServiceClient(cc grpc.ClientConnInterface) DemoServiceClient {
	return &demoServiceClient{cc}
}

func (c *demoServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/proto.DemoService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) GeneratePrimes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (DemoService_GeneratePrimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[0], "/proto.DemoService/GeneratePrimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceGeneratePrimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DemoService_GeneratePrimesClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type demoServiceGeneratePrimesClient struct {
	grpc.ClientStream
}

func (x *demoServiceGeneratePrimesClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoServiceClient) Aggregate(ctx context.Context, opts ...grpc.CallOption) (DemoService_AggregateClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[1], "/proto.DemoService/Aggregate", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceAggregateClient{stream}
	return x, nil
}

type DemoService_AggregateClient interface {
	Send(*AggregateRequest) error
	CloseAndRecv() (*AggregateResponse, error)
	grpc.ClientStream
}

type demoServiceAggregateClient struct {
	grpc.ClientStream
}

func (x *demoServiceAggregateClient) Send(m *AggregateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoServiceAggregateClient) CloseAndRecv() (*AggregateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AggregateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoServiceClient) Greet(ctx context.Context, opts ...grpc.CallOption) (DemoService_GreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[2], "/proto.DemoService/Greet", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceGreetClient{stream}
	return x, nil
}

type DemoService_GreetClient interface {
	Send(*GreetRequest) error
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type demoServiceGreetClient struct {
	grpc.ClientStream
}

func (x *demoServiceGreetClient) Send(m *GreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoServiceGreetClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServiceServer is the server API for DemoService service.
// All implementations must embed UnimplementedDemoServiceServer
// for forward compatibility
type DemoServiceServer interface {
	// Operation contract(s)
	// Request-Response
	Add(context.Context, *AddRequest) (*AddResponse, error)
	// Server-Streaming
	GeneratePrimes(*PrimeRequest, DemoService_GeneratePrimesServer) error
	// Client Streaming
	Aggregate(DemoService_AggregateServer) error
	// Bidirectional streaming
	Greet(DemoService_GreetServer) error
	mustEmbedUnimplementedDemoServiceServer()
}

// UnimplementedDemoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServiceServer struct {
}

func (UnimplementedDemoServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDemoServiceServer) GeneratePrimes(*PrimeRequest, DemoService_GeneratePrimesServer) error {
	return status.Errorf(codes.Unimplemented, "method GeneratePrimes not implemented")
}
func (UnimplementedDemoServiceServer) Aggregate(DemoService_AggregateServer) error {
	return status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (UnimplementedDemoServiceServer) Greet(DemoService_GreetServer) error {
	return status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedDemoServiceServer) mustEmbedUnimplementedDemoServiceServer() {}

// UnsafeDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServiceServer will
// result in compilation errors.
type UnsafeDemoServiceServer interface {
	mustEmbedUnimplementedDemoServiceServer()
}

func RegisterDemoServiceServer(s grpc.ServiceRegistrar, srv DemoServiceServer) {
	s.RegisterService(&DemoService_ServiceDesc, srv)
}

func _DemoService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DemoService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_GeneratePrimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServiceServer).GeneratePrimes(m, &demoServiceGeneratePrimesServer{stream})
}

type DemoService_GeneratePrimesServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type demoServiceGeneratePrimesServer struct {
	grpc.ServerStream
}

func (x *demoServiceGeneratePrimesServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DemoService_Aggregate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServiceServer).Aggregate(&demoServiceAggregateServer{stream})
}

type DemoService_AggregateServer interface {
	SendAndClose(*AggregateResponse) error
	Recv() (*AggregateRequest, error)
	grpc.ServerStream
}

type demoServiceAggregateServer struct {
	grpc.ServerStream
}

func (x *demoServiceAggregateServer) SendAndClose(m *AggregateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoServiceAggregateServer) Recv() (*AggregateRequest, error) {
	m := new(AggregateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DemoService_Greet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServiceServer).Greet(&demoServiceGreetServer{stream})
}

type DemoService_GreetServer interface {
	Send(*GreetResponse) error
	Recv() (*GreetRequest, error)
	grpc.ServerStream
}

type demoServiceGreetServer struct {
	grpc.ServerStream
}

func (x *demoServiceGreetServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoServiceGreetServer) Recv() (*GreetRequest, error) {
	m := new(GreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoService_ServiceDesc is the grpc.ServiceDesc for DemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DemoService",
	HandlerType: (*DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DemoService_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GeneratePrimes",
			Handler:       _DemoService_GeneratePrimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Aggregate",
			Handler:       _DemoService_Aggregate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Greet",
			Handler:       _DemoService_Greet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
